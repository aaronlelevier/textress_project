### Configuration file for Nginx to act as a 
### reverse proxy for an app farm.

# Define the app servers that we're in front of.
upstream textress {
    {% for server, addrs in salt['mine.get']('roles:appserver', 'network.ip_addrs', expr_form='grain').items() %}
    # server {{ addrs[0] }}:1337;
    server unix:///opt/django/{{ nodename }}.sock;
    {% endfor %}
}

# Forward all port 80 http traffic to our app farm, defined above as 'textress'.
server {
    listen       80;
    server_name  {{ salt['network.ip_addrs']()[1] }};  # <-- change the '1' to '0' if you're not using 
                                                       #     DigitalOcean's private networking.
    charset     utf-8;

    root /opt/django/textress/textress;
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;
    client_max_body_size 4G;
    keepalive_timeout 5;

    location /static/ {
        autoindex on;
        alias /opt/django/textress/static/; 
    }

    location / {
        # uWSGI config
        uwsgi_pass textress; # name of the `upstream` server
        include /opt/django/uwsgi_params; # the uwsgi_params file you installed

        # default Nginx config
        # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # proxy_set_header Host $http_host;
        # proxy_set_header X-Forwarded-Protocol $scheme;
        # proxy_redirect off;
        # proxy_pass http://django;
    }

    error_page 500 502 503 504 /500.html;
    location = /500.html {
        root /opt/django/textress/templates/error;
    }
}